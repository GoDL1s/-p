import os
import asyncio
import logging
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.filters import Command
import ccxt.async_support as ccxt
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, GridSearchCV, TimeSeriesSplit
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from sklearn.ensemble import RandomForestRegressor, VotingRegressor, IsolationForest
from sklearn.base import BaseEstimator, RegressorMixin
from sklearn.linear_model import ElasticNet
from sklearn.svm import SVR
import tensorflow as tf
from tensorflow import keras
from statsmodels.tsa.arima.model import ARIMA
from prophet import Prophet
from deep_translator import GoogleTranslator
import xgboost as xgb
import httpx
from bs4 import BeautifulSoup
import plotly.graph_objs as go
from plotly.subplots import make_subplots
import io
import ta
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from scipy.optimize import minimize
import aiohttp
import functools
import time
import warnings
from concurrent.futures import ThreadPoolExecutor
import joblib
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import logging
from logging.handlers import RotatingFileHandler
import gc
import time
import psutil
from collections import OrderedDict
import asyncio
from typing import Dict, Any
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from google.oauth2.credentials import Credentials
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
import io
import os
import asyncio
import aiohttp
import gc
from datetime import datetime
import pickle

warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings("ignore", category=UserWarning)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Windows
if os.name == 'nt':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è TensorFlow
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
tf.get_logger().setLevel('ERROR')

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è CPU
num_cores = 24  # AMD EPYC 7402 –∏–º–µ–µ—Ç 24 —è–¥—Ä–∞
os.environ['OMP_NUM_THREADS'] = str(num_cores)
os.environ['KMP_AFFINITY'] = 'granularity=fine,verbose,compact,1,0'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s',
                    handlers=[
                        logging.FileHandler("bot_log.txt", encoding='utf-8'),
                        logging.StreamHandler()
                    ])

logger = logging.getLogger(__name__)
log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
log_file = "bot_log.txt"
log_handler = RotatingFileHandler(log_file, maxBytes=5*1024*1024, backupCount=2)
log_handler.setFormatter(log_formatter)
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logger.addHandler(log_handler)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
crypto_ml_logger = logging.getLogger('crypto_ml')
crypto_ml_logger.setLevel(logging.INFO)
crypto_ml_handler = RotatingFileHandler("crypto_ml_log.txt", maxBytes=5*1024*1024, backupCount=2)
crypto_ml_handler.setFormatter(log_formatter)
crypto_ml_logger.addHandler(crypto_ml_handler)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(r'C:\Users\lisyu\–±–æ—Ç\API.env')

API_KEY = os.getenv('API_KEY')
API_SECRET = os.getenv('API_SECRET')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
required_tokens = ['API_KEY', 'API_SECRET', 'TELEGRAM_TOKEN', 'CHAT_ID']
missing_tokens = [token for token in required_tokens if os.getenv(token) is None]
if missing_tokens:
    raise ValueError(f"–°–ª–µ–¥—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ñ–∞–π–ª–µ .env: {', '.join(missing_tokens)}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
SYMBOLS = ['BTCUSDT', 'ETHUSDT', 'LTCUSDT', 'XRPUSDT', 'BNBUSDT', 'ADAUSDT', 'DOGEUSDT', 'DOTUSDT', 'LINKUSDT', 'UNIUSDT']
TIMEFRAMES = ['1m', '5m', '15m', '30m', '1h', '4h', '1d']
TRADING_ENABLED = False
UPDATE_INTERVAL = 60  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
MODEL_UPDATE_INTERVAL = timedelta(minutes=30)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
HISTORICAL_DATA_DAYS = 90
PORTFOLIO_PERCENTAGE = 0.1
MAX_PORTFOLIO_RISK = 5

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
features = ['open', 'high', 'low', 'close', 'volume', 'SMA20', 'SMA50', 'RSI', 'MACD', 'MACD_Signal', 
            'BB_Upper', 'BB_Lower', 'BB_Middle', 'EMA20', 'ATR', 'OBV', 'close_lag1', 'close_lag2',
            'Stochastic_K', 'Stochastic_D', 'ROC', 'Williams_R', 'CCI', 'ADX']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = Bot(token=TELEGRAM_TOKEN)
dispatcher = Dispatcher()
exchange = ccxt.binance({
    'apiKey': API_KEY,
    'secret': API_SECRET,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'spot'
    }
})

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–¢–ê–†–¢"), KeyboardButton(text="–°–¢–û–ü")],
        [KeyboardButton(text="–ë–ê–õ–ê–ù–° üí∞"), KeyboardButton(text="–ê–ù–ê–õ–ò–ó üìä")],
        [KeyboardButton(text="–ì–†–ê–§–ò–ö üìà"), KeyboardButton(text="–°–¢–ê–¢–ò–°–¢–ò–ö–ê üìâ")],
        [KeyboardButton(text="–ù–û–í–û–°–¢–ò üì∞"), KeyboardButton(text="–ù–ê–°–¢–†–û–ô–ö–ò ‚öôÔ∏è")],
        [KeyboardButton(text="–ü–ï–†–ï–í–û–î–´ üí∏"), KeyboardButton(text="–ü–û–†–¢–§–ï–õ–¨ üíº")],
        [KeyboardButton(text="–†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢ üõ°Ô∏è"), KeyboardButton(text="–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø üîß")]
    ],
    resize_keyboard=True
)

balance_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–°–ü–û–¢–û–í–´–ô –ë–ê–õ–ê–ù–°", callback_data="spot_balance")],
        [InlineKeyboardButton(text="–ë–ê–õ–ê–ù–° P2P üí≥", callback_data="p2p_balance")]
    ]
)

settings_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="10%", callback_data="set_percentage_10"),
         InlineKeyboardButton(text="20%", callback_data="set_percentage_20"),
         InlineKeyboardButton(text="30%", callback_data="set_percentage_30")],
        [InlineKeyboardButton(text="50%", callback_data="set_percentage_50"),
         InlineKeyboardButton(text="100%", callback_data="set_percentage_100")],
        [InlineKeyboardButton(text="–°–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç", callback_data="set_custom_percentage")]
    ]
)

transfer_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–≤–æ–¥ –∫—Ä–∏–ø—Ç—ã", callback_data="transfer_crypto")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–≤–æ–¥ P2P", callback_data="transfer_p2p")]
    ]
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
latest_analysis_results = {}
model_performance = {}
user_portfolios = {}
is_trading = False
daily_balance_start = None
daily_pnl = 0
trade_history = []

# –ù–æ–≤—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DATA_CACHE = {}
DATA_CACHE_TIME = 300  # 5 –º–∏–Ω—É—Ç
NEWS_CACHE = {}
NEWS_CACHE_TIME = 3600  # 1 —á–∞—Å
ANALYSIS_RESULTS_CACHE = OrderedDict()
MAX_CACHE_SIZE = 1000

# ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
executor = ThreadPoolExecutor(max_workers=num_cores)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def async_cache(ttl=300):
    def wrapper(func):
        cache = {}
        @functools.wraps(func)
        async def wrapped(*args, **kwargs):
            key = str(args) + str(kwargs)
            if key in cache:
                result, timestamp = cache[key]
                if time.time() - timestamp < ttl:
                    return result
            result = await func(*args, **kwargs)
            cache[key] = (result, time.time())
            return result
        return wrapped
    return wrapper

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
HISTORICAL_DATA_CACHE = OrderedDict()
ANALYSIS_RESULTS_CACHE = OrderedDict()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Drive API
SCOPES = ['https://www.googleapis.com/auth/drive.file']
CLIENT_SECRET_FILE = 'client_secret.json'
APPLICATION_NAME = 'Crypto Trading Bot'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ Google Drive
def get_google_drive_service():
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å service account
        creds = None
        if os.path.exists('service_account.json'):
            creds = service_account.Credentials.from_service_account_file(
                'service_account.json', scopes=['https://www.googleapis.com/auth/drive.file'])
        elif all(key in os.environ for key in ['GOOGLE_ACCOUNT_TYPE', 'GOOGLE_CLIENT_ID', 'GOOGLE_CLIENT_EMAIL', 'GOOGLE_PRIVATE_KEY']):
            creds_info = {
                "type": os.environ['GOOGLE_ACCOUNT_TYPE'],
                "client_id": os.environ['GOOGLE_CLIENT_ID'],
                "client_email": os.environ['GOOGLE_CLIENT_EMAIL'],
                "private_key": os.environ['GOOGLE_PRIVATE_KEY'].replace('\\n', '\n'),
            }
            creds = service_account.Credentials.from_service_account_info(
                creds_info, scopes=['https://www.googleapis.com/auth/drive.file'])
        
        if creds:
            return build('drive', 'v3', credentials=creds)
        else:
            logger.warning("Google Drive –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Google Drive –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Drive —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Drive —Å–µ—Ä–≤–∏—Å–∞
drive_service = get_google_drive_service()

async def upload_to_drive(file_path, file_name):
    try:
        file_metadata = {'name': file_name}
        media = MediaFileUpload(file_path, resumable=True)
        file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
        logger.info(f"File ID: {file.get('id')} uploaded to Google Drive")
    except Exception as e:
        logger.error(f"Error uploading file to Google Drive: {e}")

@async_cache(ttl=DATA_CACHE_TIME)
async def get_historical_data(symbol, timeframe):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    """
    try:
        end_time = exchange.milliseconds()
        start_time = end_time - (HISTORICAL_DATA_DAYS * 24 * 60 * 60 * 1000)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É–¥—É—â–µ–≥–æ
        current_time = exchange.milliseconds()
        if start_time > end_time:
            start_time = end_time - (24 * 60 * 60 * 1000)  # –ù–∞—á–Ω–µ–º —Å 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
        
        all_ohlcv = []
        while start_time < end_time:
            ohlcv = await exchange.fetch_ohlcv(symbol, timeframe, start_time, limit=1000)
            if len(ohlcv) == 0:
                break
            all_ohlcv.extend(ohlcv)
            start_time = ohlcv[-1][0] + 1
        
        df = pd.DataFrame(all_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        
        df.index = pd.DatetimeIndex(df.index).to_period(timeframe)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        cache_key = f"{symbol}_{timeframe}"
        HISTORICAL_DATA_CACHE[cache_key] = df.tail(MAX_CACHE_SIZE)
        
        # –ï—Å–ª–∏ –∫—ç—à –ø—Ä–µ–≤—ã—Å–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        if len(HISTORICAL_DATA_CACHE) > MAX_CACHE_SIZE:
            HISTORICAL_DATA_CACHE.popitem(last=False)
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–∞ {timeframe}")
        return df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ {timeframe}: {e}")
        return pd.DataFrame()
    
def add_features(df):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫ DataFrame
    """
    df['SMA20'] = ta.trend.sma_indicator(df['close'], window=20)
    df['SMA50'] = ta.trend.sma_indicator(df['close'], window=50)
    df['RSI'] = ta.momentum.rsi(df['close'], window=14)
    macd = ta.trend.MACD(df['close'])
    df['MACD'] = macd.macd()
    df['MACD_Signal'] = macd.macd_signal()
    bb = ta.volatility.BollingerBands(df['close'])
    df['BB_Upper'] = bb.bollinger_hband()
    df['BB_Lower'] = bb.bollinger_lband()
    df['BB_Middle'] = bb.bollinger_mavg()
    df['EMA20'] = ta.trend.ema_indicator(df['close'], window=20)
    df['ATR'] = ta.volatility.average_true_range(df['high'], df['low'], df['close'])
    df['OBV'] = ta.volume.on_balance_volume(df['close'], df['volume'])
    df['close_lag1'] = df['close'].shift(1)
    df['close_lag2'] = df['close'].shift(2)
    
    # –ù–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    stoch = ta.momentum.StochasticOscillator(df['high'], df['low'], df['close'])
    df['Stochastic_K'] = stoch.stoch()
    df['Stochastic_D'] = stoch.stoch_signal()
    df['ROC'] = ta.momentum.roc(df['close'], window=12)
    df['Williams_R'] = ta.momentum.williams_r(df['high'], df['low'], df['close'], lbp=14)
    df['CCI'] = ta.trend.cci(df['high'], df['low'], df['close'], window=20)
    df['ADX'] = ta.trend.adx(df['high'], df['low'], df['close'], window=14)
    
    return df

def prepare_data_for_ml(df):
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    """
    df = add_features(df)
    
    df_clean = df.dropna()
    
    if df_clean.empty:
        logger.warning("–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è NaN –∑–Ω–∞—á–µ–Ω–∏–π –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–ª–∏ –ø—É—Å—Ç—ã–º–∏")
        return None, None, None

    X = df_clean[features]
    y = df_clean['close'].shift(-1)  # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞

    X = X[:-1]
    y = y[:-1]

    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    return X_scaled, y, scaler

def optimize_rf(X, y):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Random Forest
    """
    param_grid = {
        'n_estimators': [100, 200, 300],
        'max_depth': [None, 10, 20, 30],
        'min_samples_split': [2, 5, 10],
        'min_samples_leaf': [1, 2, 4]
    }
    rf = RandomForestRegressor(random_state=42, n_jobs=num_cores)
    tscv = TimeSeriesSplit(n_splits=5)
    grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=tscv, n_jobs=num_cores, verbose=1)
    grid_search.fit(X, y)
    return grid_search.best_estimator_

class LSTMRegressor(BaseEstimator, RegressorMixin):
    """
    –ö–ª–∞—Å—Å –¥–ª—è LSTM —Ä–µ–≥—Ä–µ—Å—Å–æ—Ä–∞
    """
    def __init__(self, input_shape, epochs=50, batch_size=32):
        self.input_shape = input_shape
        self.epochs = epochs
        self.batch_size = batch_size
        self.model = None

    def fit(self, X, y):
        self.model = build_lstm_model(self.input_shape)
        self.model.fit(X.reshape(-1, self.input_shape, 1), y, epochs=self.epochs, batch_size=self.batch_size, verbose=0)
        return self

    def predict(self, X):
        return self.model.predict(X.reshape(-1, self.input_shape, 1)).flatten()

def build_lstm_model(input_shape):
    """
    –°–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å LSTM
    """
    model = keras.Sequential([
        keras.layers.LSTM(64, return_sequences=True, input_shape=(input_shape, 1)),
        keras.layers.LSTM(32, return_sequences=False),
        keras.layers.Dense(16, activation='relu'),
        keras.layers.Dense(1)
    ])
    model.compile(optimizer='adam', loss='mse')
    return model

def validate_model(X, y, model):
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
    """
    tscv = TimeSeriesSplit(n_splits=5)
    scores = []
    for train_index, test_index in tscv.split(X):
        X_train, X_test = X[train_index], X[test_index]
        y_train, y_test = y[train_index], y[test_index]
        model.fit(X_train, y_train)
        scores.append(model.score(X_test, y_test))
    return np.mean(scores), np.std(scores)

def backtest_strategy(df, model, initial_balance=1000):
    """
    –ü—Ä–æ–≤–æ–¥–∏—Ç –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    """
    balance = initial_balance
    position = None
    for i in range(len(df) - 1):
        current_price = df['close'].iloc[i]
        next_price = df['close'].iloc[i + 1]
        prediction = model.predict(df.iloc[i:i+1][features])
        
        if prediction > current_price and position is None:
            position = balance / current_price
            balance = 0
        elif prediction < current_price and position is not None:
            balance = position * current_price
            position = None
    
    if position is not None:
        balance = position * df['close'].iloc[-1]
    
    return balance - initial_balance

def analyze_residuals(y_true, y_pred):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –º–æ–¥–µ–ª–∏
    """
    residuals = y_true - y_pred
    plt.figure(figsize=(10, 6))
    plt.scatter(y_pred, residuals)
    plt.xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
    plt.ylabel('–û—Å—Ç–∞—Ç–∫–∏')
    plt.title('–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤')
    plt.axhline(y=0, color='r', linestyle='--')
    plt.savefig('residuals_analysis.png')
    plt.close()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ Google Drive
    asyncio.create_task(upload_to_drive('residuals_analysis.png', 'residuals_analysis.png'))

def monitor_model_performance(model, X, y, window_size=100):
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    """
    performance = []
    for i in range(window_size, len(X), window_size // 10):
        X_window = X[i-window_size:i]
        y_window = y[i-window_size:i]
        y_pred = model.predict(X_window)
        mse = mean_squared_error(y_window, y_pred)
        performance.append(mse)
    return performance

def remove_anomalies(X, y, contamination=0.01):
    """
    –£–¥–∞–ª—è–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    """
    iso_forest = IsolationForest(contamination=contamination, random_state=42, n_jobs=num_cores)
    yhat = iso_forest.fit_predict(X)
    mask = yhat != -1
    return X[mask], y[mask]

def naive_forecast(y):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–∞–∏–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
    """
    return np.roll(y, 1)

async def plot_feature_importance(model, feature_names):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    """
    importance = model.feature_importances_
    sorted_idx = np.argsort(importance)
    pos = np.arange(sorted_idx.shape[0]) + .5
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.barh(pos, importance[sorted_idx], align='center')
    ax.set_yticks(pos)
    ax.set_yticklabels(np.array(feature_names)[sorted_idx])
    ax.set_title('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')
    plt.tight_layout()
    plt.savefig('feature_importance.png')
    plt.close()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ Google Drive
    asyncio.create_task(upload_to_drive('feature_importance.png', 'feature_importance.png'))

async def analyze_autocorrelation(y):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
    """
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 10))
    plot_acf(y, ax=ax1, lags=50)
    plot_pacf(y, ax=ax2, lags=50)
    plt.savefig('autocorrelation.png')
    plt.close()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ Google Drive
    asyncio.create_task(upload_to_drive('autocorrelation.png', 'autocorrelation.png'))

async def train_and_evaluate_models(X, y):
    """
    –û–±—É—á–∞–µ—Ç –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    """
    if X is None or y is None:
        logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ")
        return {}

    X, y = remove_anomalies(X, y)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
    
    rf_model = load_model('rf', 'all')
    if rf_model is None:
        rf_model = optimize_rf(X_train, y_train)
    else:
        rf_model.fit(X_train, y_train)
    
    xgb_model = load_model('xgb', 'all')
    if xgb_model is None:
        xgb_model = xgb.XGBRegressor(objective="reg:squarederror", random_state=42, n_jobs=num_cores)
    
    lstm_model = load_model('lstm', 'all')
    if lstm_model is None:
        lstm_model = LSTMRegressor(input_shape=X_train.shape[1], epochs=50, batch_size=32)
    
    elastic_net = load_model('elastic_net', 'all')
    if elastic_net is None:
        elastic_net = ElasticNet(random_state=42)
    
    svr = load_model('svr', 'all')
    if svr is None:
        svr = SVR()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
    with ThreadPoolExecutor(max_workers=num_cores) as executor:
        future_xgb = executor.submit(xgb_model.fit, X_train, y_train)
        future_lstm = executor.submit(lstm_model.fit, X_train, y_train)
        future_elastic = executor.submit(elastic_net.fit, X_train, y_train)
        future_svr = executor.submit(svr.fit, X_train, y_train)
        
        xgb_model = future_xgb.result()
        lstm_model = future_lstm.result()
        elastic_net = future_elastic.result()
        svr = future_svr.result()
    
    ensemble = VotingRegressor([
        ('rf', rf_model),
        ('xgb', xgb_model),
        ('lstm', lstm_model),
        ('elastic', elastic_net),
        ('svr', svr)
    ])
    
    ensemble.fit(X_train, y_train)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    save_model(rf_model, 'rf', 'all')
    save_model(xgb_model, 'xgb', 'all')
    save_model(lstm_model, 'lstm', 'all')
    save_model(elastic_net, 'elastic_net', 'all')
    save_model(svr, 'svr', 'all')
    save_model(ensemble, 'ensemble', 'all')
    
    y_pred = ensemble.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100
    
    val_score, val_std = validate_model(X, y, ensemble)
    backtest_profit = backtest_strategy(pd.DataFrame(X, columns=features), ensemble)
    analyze_residuals(y_test, y_pred)
    performance = monitor_model_performance(ensemble, X, y)
    naive_mse = mean_squared_error(y[1:], naive_forecast(y)[1:])
    
    await plot_feature_importance(rf_model, features)
    await analyze_autocorrelation(y)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    crypto_ml_logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:")
    crypto_ml_logger.info(f"MSE: {mse:.4f}")
    crypto_ml_logger.info(f"R2: {r2:.4f}")
    crypto_ml_logger.info(f"MAE: {mae:.4f}")
    crypto_ml_logger.info(f"MAPE: {mape:.2f}%")
    crypto_ml_logger.info(f"Validation Score: {val_score:.4f} +/- {val_std:.4f}")
    crypto_ml_logger.info(f"Backtest Profit: {backtest_profit:.2f}")
    crypto_ml_logger.info(f"Naive MSE: {naive_mse:.4f}")
    
    return {
        'ensemble': {'model': ensemble, 'mse': mse, 'r2': r2, 'mae': mae, 'mape': mape},
        'rf': {'model': rf_model},
        'xgb': {'model': xgb_model},
        'lstm': {'model': lstm_model},
        'elastic_net': {'model': elastic_net},
        'svr': {'model': svr},
        'validation_score': val_score,
        'validation_std': val_std,
        'backtest_profit': backtest_profit,
        'performance': performance,
        'naive_mse': naive_mse
    }
def save_model(model, symbol, timeframe):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    """
    filename = f"model_{symbol}_{timeframe}.joblib"
    joblib.dump(model, filename)
    logger.info(f"–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ Google Drive
    asyncio.create_task(upload_to_drive(filename, filename))

def load_model(symbol, timeframe):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    """
    filename = f"model_{symbol}_{timeframe}.joblib"
    if os.path.exists(filename):
        model = joblib.load(filename)
        logger.info(f"–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {filename}")
        return model
    return None

async def learn_from_errors():
    """
    –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫ –ø—Ä–æ—à–ª—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    """
    for symbol in SYMBOLS:
        for timeframe in TIMEFRAMES:
            df = await get_historical_data(symbol, timeframe)
            X, y, scaler = prepare_data_for_ml(df)
            if X is not None and y is not None:
                model = latest_analysis_results[(symbol, timeframe)]['ensemble']['model']
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –º–æ–¥–µ–ª–∏
                y_pred = model.predict(X)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ—à–∏–±–∫–∏
                errors = y - y_pred
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—é—â–∏–π –æ—à–∏–±–∫–∏
                X_new = np.column_stack((X, errors[:-1]))  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –¥–ª—è –Ω–µ–µ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                y_new = y[1:]  # –°–¥–≤–∏–≥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –≤–ø–µ—Ä–µ–¥
                
                # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –Ω–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
                model.fit(X_new, y_new)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                save_model(model, symbol, timeframe)
                
                logger.info(f"–ú–æ–¥–µ–ª—å –¥–ª—è {symbol} –Ω–∞ {timeframe} –æ–±—É—á–µ–Ω–∞ –Ω–∞ –æ—à–∏–±–∫–∞—Ö")

async def error_recovery(func):
    async def wrapper(*args, **kwargs):
        max_retries = 3
        retry_delay = 5  # —Å–µ–∫—É–Ω–¥
        
        for attempt in range(max_retries):
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
                if attempt < max_retries - 1:
                    logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(retry_delay)
                else:
                    logger.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –§—É–Ω–∫—Ü–∏—è {func.__name__} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    return wrapper

@error_recovery
async def analyze_crypto(symbol, timeframe):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    """
    try:
        df = await get_historical_data(symbol, timeframe)
        if df.empty:
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –Ω–∞ {timeframe}")
            return None

        X, y, scaler = prepare_data_for_ml(df)
        if X is None or y is None:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol} –Ω–∞ {timeframe}")
            return None

        # ARIMA –ø—Ä–æ–≥–Ω–æ–∑
        try:
            arima_model = ARIMA(df['close'], order=(1,1,1))
            arima_results = arima_model.fit()
            arima_forecast = arima_results.forecast(steps=1).iloc[0]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ ARIMA –ø—Ä–æ–≥–Ω–æ–∑–µ –¥–ª—è {symbol} –Ω–∞ {timeframe}: {e}")
            arima_forecast = None

        # Prophet –ø—Ä–æ–≥–Ω–æ–∑
        try:
            prophet_df = pd.DataFrame({'ds': df.index.to_timestamp(), 'y': df['close']})
            prophet_model = Prophet(yearly_seasonality=True)
            prophet_model.fit(prophet_df)
            future_data = prophet_model.make_future_dataframe(periods=1, freq=timeframe)
            prophet_forecast = prophet_model.predict(future_data).iloc[-1]['yhat']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ Prophet –ø—Ä–æ–≥–Ω–æ–∑–µ –¥–ª—è {symbol} –Ω–∞ {timeframe}: {e}")
            prophet_forecast = None

        # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π
        sentiment_score = await analyze_news_sentiment(symbol)

        # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ –∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        volume_ma, liquidity = analyze_volume_liquidity(df)

        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
        anomalies = detect_anomalies(df)

        model_results = await train_and_evaluate_models(X, y)
        ensemble_model = model_results['ensemble']['model']
        last_data_point = scaler.transform(df.iloc[-1][features].values.reshape(1, -1))
        prediction = ensemble_model.predict(last_data_point)[0]
        
        current_price = df['close'].iloc[-1]
        change = ((prediction - current_price) / current_price) * 100
        
        # –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤/—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
        volatility = calculate_volatility(df['close'])
        stop_loss, take_profit = calculate_dynamic_stops(current_price, volatility)
        
        result = {
            'symbol': symbol,
            'timeframe': timeframe,
            'current_price': current_price,
            'prediction': prediction,
            'arima_forecast': arima_forecast,
            'prophet_forecast': prophet_forecast,
            'change': change,
            'sentiment_score': sentiment_score,
            'volume_ma': volume_ma,
            'liquidity': liquidity,
            'anomalies': len(anomalies),
            'volatility': volatility,
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'metrics': model_results['ensemble'],
            'validation_score': model_results['validation_score'],
            'validation_std': model_results['validation_std'],
            'backtest_profit': model_results['backtest_profit'],
            'naive_mse': model_results['naive_mse']
        }

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        cache_key = f"{symbol}_{timeframe}"
        ANALYSIS_RESULTS_CACHE[cache_key] = result

        # –ï—Å–ª–∏ –∫—ç—à –ø—Ä–µ–≤—ã—Å–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        if len(ANALYSIS_RESULTS_CACHE) > MAX_CACHE_SIZE:
            ANALYSIS_RESULTS_CACHE.popitem(last=False)

        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω –∞–Ω–∞–ª–∏–∑ –¥–ª—è {symbol} –Ω–∞ {timeframe}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        crypto_ml_logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol} –Ω–∞ {timeframe}:")
        crypto_ml_logger.info(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}")
        crypto_ml_logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ (–∞–Ω—Å–∞–º–±–ª—å): {prediction:.2f} ({change:.2f}%)")
        crypto_ml_logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ (ARIMA): {arima_forecast:.2f}")
        crypto_ml_logger.info(f"–ü—Ä–æ–≥–Ω–æ–∑ (Prophet): {prophet_forecast:.2f}")
        crypto_ml_logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞: {sentiment_score:.2f}")
        crypto_ml_logger.info(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.4f}")
        crypto_ml_logger.info(f"–°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss:.2f}")
        crypto_ml_logger.info(f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {take_profit:.2f}")
        
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol} –Ω–∞ {timeframe}: {e}")
        return None

async def analyze_news_sentiment(symbol):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    """
    news = await get_crypto_news(symbol)
    if not news:
        return 0
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    positive_words = ['—Ä–æ—Å—Ç', '—É–≤–µ–ª–∏—á–µ–Ω–∏–µ', '–ø—Ä–∏–±—ã–ª—å', '—É—Å–ø–µ—Ö', '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π']
    negative_words = ['–ø–∞–¥–µ–Ω–∏–µ', '—Å–Ω–∏–∂–µ–Ω–∏–µ', '—É–±—ã—Ç–æ–∫', '–ø—Ä–æ–±–ª–µ–º–∞', '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π']
    
    sentiment_scores = []
    for item in news:
        score = 0
        for word in positive_words:
            if word in item['title'].lower():
                score += 1
        for word in negative_words:
            if word in item['title'].lower():
                score -= 1
        sentiment_scores.append(score)
    
    return np.mean(sentiment_scores) if sentiment_scores else 0

async def get_crypto_news(symbol):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
    """
    url = f"https://cryptonews-api.com/api/v1?tickers={symbol}&items=5&token=YOUR_API_TOKEN"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                news = await response.json()
                return news['data']
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è {symbol}")
                return []

def analyze_volume_liquidity(df):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–º –∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
    """
    volume_ma = df['volume'].rolling(window=20).mean().iloc[-1]
    liquidity = df['volume'].iloc[-1] / volume_ma
    return volume_ma, liquidity

def detect_anomalies(df):
    """
    –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
    """
    iso_forest = IsolationForest(contamination=0.01, random_state=42, n_jobs=num_cores)
    anomalies = iso_forest.fit_predict(df[['close', 'volume']])
    return np.where(anomalies == -1)[0]

def calculate_volatility(prices, window=20):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    """
    return np.std(np.log(prices[1:] / prices[:-1])) * np.sqrt(252)

def calculate_dynamic_stops(current_price, volatility, atr_multiplier=2):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
    """
    atr = volatility * current_price
    stop_loss = current_price - (atr * atr_multiplier)
    take_profit = current_price + (atr * atr_multiplier)
    return stop_loss, take_profit

async def apply_dynamic_stop_loss_take_profit(symbol, entry_price, amount, stop_loss, take_profit):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã –∫ –ø–æ–∑–∏—Ü–∏–∏
    """
    try:
        current_price = (await exchange.fetch_ticker(symbol))['last']
        
        if current_price <= stop_loss:
            order = await exchange.create_market_sell_order(symbol, amount)
            logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è {symbol}: {order}")
            return 'stop_loss'
        elif current_price >= take_profit:
            order = await exchange.create_market_sell_order(symbol, amount)
            logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–ª—è {symbol}: {order}")
            return 'take_profit'
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å/—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–ª—è {symbol}: {e}")
        return None

async def get_total_balance_usdt():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ USDT, –≤–∫–ª—é—á–∞—è —Å–ø–æ—Ç–æ–≤—ã–π –∏ P2P –±–∞–ª–∞–Ω—Å
    """
    try:
        spot_balance, _ = await get_spot_balance()
        p2p_balance = await get_p2p_balance()
        
        total_balance = spot_balance + p2p_balance
        return total_balance
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0

async def get_spot_balance():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–æ—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    """
    try:
        balance = await exchange.fetch_balance({'type': 'spot'})
        total_balance_usdt = 0
        crypto_balances = {}

        for currency, amount in balance['total'].items():
            if amount > 0:
                if currency != 'USDT':
                    try:
                        ticker = await exchange.fetch_ticker(f"{currency}/USDT")
                        price_usdt = ticker['last']
                        value_usdt = amount * price_usdt
                        total_balance_usdt += value_usdt
                        crypto_balances[currency] = {
                            'amount': amount,
                            'price_usdt': price_usdt,
                            'value_usdt': value_usdt
                        }
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {currency}: {e}")
                else:
                    total_balance_usdt += amount
                    crypto_balances[currency] = {
                        'amount': amount,
                        'price_usdt': 1,
                        'value_usdt': amount
                    }

        return total_balance_usdt, crypto_balances
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0, {}

async def get_p2p_balance():
    """
    –ü–æ–ª—É—á–∞–µ—Ç P2P –±–∞–ª–∞–Ω—Å
    """
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è P2P –±–∞–ª–∞–Ω—Å–∞
        # –¢–∞–∫ –∫–∞–∫ —É CCXT –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ, –≤–∞–º –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è
        # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π API Binance –¥–ª—è P2P
        p2p_balance = 0  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ P2P –±–∞–ª–∞–Ω—Å–∞
        return p2p_balance
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ P2P –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0

async def create_candlestick_chart(df, symbol, timeframe):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–∞–∫ InputFile
    """
    fig = make_subplots(rows=4, cols=1, shared_xaxes=True, vertical_spacing=0.02, 
                        row_heights=[0.5, 0.15, 0.15, 0.2],
                        subplot_titles=(f"{symbol} Price", "Volume", "MACD", "RSI"))

    # –°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
    fig.add_trace(go.Candlestick(x=df.index, open=df['open'], high=df['high'], low=df['low'], close=df['close'], name='Price'), row=1, col=1)
    
    # –ì—Ä–∞—Ñ–∏–∫ –æ–±—ä–µ–º–∞
    fig.add_trace(go.Bar(x=df.index, y=df['volume'], name='Volume'), row=2, col=1)
    
    # MACD
    fig.add_trace(go.Scatter(x=df.index, y=df['MACD'], name='MACD', line=dict(color='blue')), row=3, col=1)
    fig.add_trace(go.Scatter(x=df.index, y=df['MACD_Signal'], name='Signal', line=dict(color='orange')), row=3, col=1)
    
    # RSI
    fig.add_trace(go.Scatter(x=df.index, y=df['RSI'], name='RSI', line=dict(color='purple')), row=4, col=1)
    fig.add_hline(y=70, line_dash="dash", line_color="red", row=4, col=1)
    fig.add_hline(y=30, line_dash="dash", line_color="green", row=4, col=1)

    fig.update_layout(height=1000, width=1200, title_text=f"{symbol} Analysis ({timeframe})")
    fig.update_xaxes(rangeslider_visible=False)

    img_bytes = fig.to_image(format="png")
    return InputFile(io.BytesIO(img_bytes), filename=f"{symbol}_{timeframe}_chart.png")

def clean_memory():
    gc.collect()

def log_performance():
    process = psutil.Process()
    memory_info = process.memory_info()
    cpu_percent = process.cpu_percent(interval=1)
    logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_info.rss / 1024 / 1024:.2f} MB")
    logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {cpu_percent}%")
    
async def continuous_analysis():
    """
    –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    """
    while True:
        start_time = time.time()
        logger.info("–ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        tasks = []
        for symbol in SYMBOLS:
            for timeframe in TIMEFRAMES:
                tasks.append(asyncio.create_task(analyze_crypto(symbol, timeframe)))
        
        try:
            results = await asyncio.gather(*tasks)
            
            for result in results:
                if result:
                    symbol = result['symbol']
                    timeframe = result['timeframe']
                    latest_analysis_results[(symbol, timeframe)] = result
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol} –Ω–∞ {timeframe}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
                    plt.figure(figsize=(12, 6))
                    plt.plot(result['metrics']['performance'])
                    plt.title(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol} ({timeframe})")
                    plt.xlabel("–í—Ä–µ–º—è")
                    plt.ylabel("MSE")
                    plt.savefig(f'model_performance_{symbol}_{timeframe}.png')
                    plt.close()
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ Google Drive
                    asyncio.create_task(upload_to_drive(f'model_performance_{symbol}_{timeframe}.png', f'model_performance_{symbol}_{timeframe}.png'))
                    
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {symbol} –Ω–∞ {timeframe}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        
        clean_memory()  # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞
        
        end_time = time.time()
        duration = end_time - start_time
        logger.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        log_performance()
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if duration > UPDATE_INTERVAL:
            new_interval = min(UPDATE_INTERVAL * 2, 300)  # –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
            logger.warning(f"–¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–Ω—è–ª –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ {new_interval} —Å–µ–∫—É–Ω–¥.")
            UPDATE_INTERVAL = new_interval
        elif duration < UPDATE_INTERVAL / 2:
            new_interval = max(UPDATE_INTERVAL / 2, 30)  # –ú–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
            logger.info(f"–¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±—ã—Å—Ç—Ä–æ. –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ {new_interval} —Å–µ–∫—É–Ω–¥.")
            UPDATE_INTERVAL = new_interval
        
        await asyncio.sleep(UPDATE_INTERVAL)

async def trading_loop():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
    """
    while True:
        if is_trading:
            logger.info("–ù–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞")
            await make_trade_decision()
            await check_and_execute_opportunities()
            logger.info("–¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
        else:
            logger.info("–¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def make_trade_decision():
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    """
    best_opportunity = None
    portfolio_weights = {}
    
    for symbol in SYMBOLS:
        analysis = latest_analysis_results.get((symbol, '5m'))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 5-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if analysis:
            score = analysis['change'] + analysis['sentiment_score'] * 10
            if analysis['anomalies'] > 0:
                score *= 0.5
            
            if best_opportunity is None or score > best_opportunity['score']:
                best_opportunity = {'symbol': symbol, 'score': score, 'analysis': analysis}
    
    if best_opportunity:
        symbol = best_opportunity['symbol']
        analysis = best_opportunity['analysis']
        
        win_rate = 0.6
        win_loss_ratio = analysis['take_profit'] / analysis['stop_loss']
        kelly_fraction = kelly_criterion(win_rate, win_loss_ratio)
        
        returns = pd.DataFrame({s: (await get_historical_data(s, '1d'))['close'].pct_change() for s in SYMBOLS})
        target_return = 0.1
        weights = optimize_portfolio(returns, target_return)
        for symbol, weight in zip(SYMBOLS, weights):
            portfolio_weights[symbol] = weight
        
        trade_amount = PORTFOLIO_PERCENTAGE * portfolio_weights[symbol] * kelly_fraction
        
        # –£–ª—É—á—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–ª–µ
        trend = analyze_trend(analysis)
        if trend == 'up' and analysis['change'] > 0:
            await execute_trade(symbol, 'buy', trade_amount, analysis['stop_loss'], analysis['take_profit'])
        elif trend == 'down' and analysis['change'] < 0:
            await execute_trade(symbol, 'sell', trade_amount, analysis['take_profit'], analysis['stop_loss'])
        else:
            logger.info(f"–ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è {symbol}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é")

async def execute_trade(symbol, side, amount, stop_loss, take_profit):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏
    """
    try:
        balance = await exchange.fetch_balance()
        total_balance = balance['total']['USDT']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
        if side == 'buy' and total_balance < amount:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {symbol}. –¢—Ä–µ–±—É–µ—Ç—Å—è: {amount}, –¥–æ—Å—Ç—É–ø–Ω–æ: {total_balance}")
            return False

        # –£–ª—É—á—à–µ–Ω–∏–µ: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        trade_amount = min(calculate_position_size(symbol, amount, stop_loss), total_balance)
        
        if side == 'buy':
            order = await exchange.create_market_buy_order(symbol, trade_amount)
        else:
            order = await exchange.create_market_sell_order(symbol, trade_amount)
        
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω –æ—Ä–¥–µ—Ä: {order}")
        trade_history.append({
            'timestamp': datetime.now(),
            'type': 'trade',
            'symbol': symbol,
            'side': side,
            'amount': trade_amount,
            'order': order
        })
        
        entry_price = order['price']
        amount = order['amount']
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä–∞
        await exchange.create_order(symbol, 'stop_loss', 'sell', amount, stop_loss)
        await exchange.create_order(symbol, 'take_profit', 'sell', amount, take_profit)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
        asyncio.create_task(monitor_position(symbol, entry_price, amount, stop_loss, take_profit))
        
        return True
    except ccxt.NetworkError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
    except ccxt.ExchangeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∏—Ä–∂–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
    
    return False

async def transfer_between_currencies(from_currency, to_currency, amount):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –≤–∞–ª—é—Ç–∞–º–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä—è–º–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        try:
            await exchange.fetch_ticker(f"{from_currency}/{to_currency}")
            direct_pair = True
        except:
            direct_pair = False

        if direct_pair:
            if from_currency == to_currency.split('/')[0]:
                order = await exchange.create_market_sell_order(f"{from_currency}/{to_currency}", amount)
            else:
                order = await exchange.create_market_buy_order(f"{from_currency}/{to_currency}", amount)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–π –ø–∞—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º USDT –∫–∞–∫ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –≤–∞–ª—é—Ç—É
            usdt_amount = await exchange.create_market_sell_order(f"{from_currency}/USDT", amount)
            final_order = await exchange.create_market_buy_order(f"{to_currency}/USDT", usdt_amount['filled'])
            order = final_order

        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –≤–∞–ª—é—Ç–∞–º–∏: {order}")
        trade_history.append({
            'timestamp': datetime.now(),
            'type': 'transfer',
            'from': from_currency,
            'to': to_currency,
            'amount': amount,
            'order': order
        })
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –º–µ–∂–¥—É –≤–∞–ª—é—Ç–∞–º–∏: {e}")
        return False

def analyze_trend(analysis):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    """
    if analysis['SMA20'] > analysis['SMA50'] and analysis['RSI'] > 50:
        return 'up'
    elif analysis['SMA20'] < analysis['SMA50'] and analysis['RSI'] < 50:
        return 'down'
    else:
        return 'sideways'

def calculate_position_size(symbol, suggested_amount, stop_loss):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞
    """
    risk_per_trade = 0.01  # 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É
    balance = exchange.fetch_balance()['total']['USDT']
    risk_amount = balance * risk_per_trade
    
    current_price = exchange.fetch_ticker(symbol)['last']
    price_difference = abs(current_price - stop_loss)
    
    position_size = risk_amount / price_difference
    return min(position_size, suggested_amount)

async def monitor_position(symbol, entry_price, amount, initial_stop_loss, initial_take_profit):
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø-–ª–æ—Å—Å
    """
    current_stop_loss = initial_stop_loss
    current_take_profit = initial_take_profit
    
    while True:
        try:
            ticker = await exchange.fetch_ticker(symbol)
            current_price = ticker['last']
            
            if current_price <= current_stop_loss:
                await exchange.create_market_sell_order(symbol, amount)
                logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è {symbol} –ø–æ —Ü–µ–Ω–µ {current_price}")
                break
            elif current_price >= current_take_profit:
                await exchange.create_market_sell_order(symbol, amount)
                logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–ª—è {symbol} –ø–æ —Ü–µ–Ω–µ {current_price}")
                break
            
            # –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø-–ª–æ—Å—Å
            if current_price - current_stop_loss > 2 * (current_take_profit - current_price):
                new_stop_loss = current_price - (current_take_profit - current_price)
                if new_stop_loss > current_stop_loss:
                    current_stop_loss = new_stop_loss
                    await exchange.edit_order(symbol, 'stop_loss', 'sell', amount, current_stop_loss)
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è {symbol}: {current_stop_loss}")
            
            await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

def kelly_criterion(win_rate, win_loss_ratio):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é –ö–µ–ª–ª–∏
    """
    q = 1 - win_rate
    return (win_rate * win_loss_ratio - q) / win_loss_ratio
def optimize_portfolio(returns, target_return):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ú–∞—Ä–∫–æ–≤–∏—Ü–∞
    """
    def objective(weights):
        portfolio_return = np.sum(returns.mean() * weights) * 252
        portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(returns.cov() * 252, weights)))
        return portfolio_volatility

    def constraint(weights):
        return np.sum(weights) - 1

    n_assets = len(returns.columns)
    args = (returns,)
    constraints = ({'type': 'eq', 'fun': constraint})
    bounds = tuple((0, 1) for _ in range(n_assets))
    
    result = minimize(objective, np.array([1/n_assets] * n_assets), method='SLSQP', bounds=bounds, constraints=constraints)
    return result.x

async def check_and_execute_opportunities():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    """
    tickers = await get_all_tickers()
    opportunities = await find_arbitrage_opportunities(tickers)
    
    for opportunity in opportunities:
        balance = await exchange.fetch_balance()
        base_balance = balance['free'].get(opportunity['base'], 0)
        quote_balance = balance['free'].get(opportunity['quote'], 0)
        
        if opportunity['action'] == 'buy' and quote_balance > 0:
            amount = min(quote_balance * PORTFOLIO_PERCENTAGE, quote_balance)
            success = await execute_arbitrage(opportunity, amount)
            if success:
                logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω –∞—Ä–±–∏—Ç—Ä–∞–∂: –ø–æ–∫—É–ø–∫–∞ {opportunity['base']} –∑–∞ {opportunity['quote']}")
        elif opportunity['action'] == 'sell' and base_balance > 0:
            amount = min(base_balance * PORTFOLIO_PERCENTAGE, base_balance)
            success = await execute_arbitrage(opportunity, amount)
            if success:
                logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω –∞—Ä–±–∏—Ç—Ä–∞–∂: –ø—Ä–æ–¥–∞–∂–∞ {opportunity['base']} –∑–∞ {opportunity['quote']}")

async def get_all_tickers():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
    """
    try:
        tickers = await exchange.fetch_tickers(SYMBOLS)
        return {symbol: float(ticker['last']) for symbol, ticker in tickers.items()}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–æ–≤: {e}")
        return {}

async def find_arbitrage_opportunities(tickers, min_profit_percent=0.5):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    """
    opportunities = []
    for base in SYMBOLS:
        for quote in SYMBOLS:
            if base != quote:
                base_price = tickers.get(f"{base}")
                quote_price = tickers.get(f"{quote}")
                if base_price and quote_price:
                    direct_rate = base_price / quote_price
                    market_rate = await get_market_rate(base, quote)
                    if market_rate:
                        profit_percent = (market_rate / direct_rate - 1) * 100
                        if profit_percent > min_profit_percent:
                            opportunities.append({
                                'base': base,
                                'quote': quote,
                                'profit_percent': profit_percent,
                                'action': 'buy' if market_rate > direct_rate else 'sell'
                            })
    return opportunities

async def get_market_rate(base, quote):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π –∫—É—Ä—Å –¥–ª—è –ø–∞—Ä—ã –≤–∞–ª—é—Ç
    """
    try:
        ticker = await exchange.fetch_ticker(f"{base}/{quote}")
        return float(ticker['last'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫—É—Ä—Å–∞ {base}/{quote}: {e}")
        return None

async def execute_arbitrage(opportunity, amount):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É
    """
    base = opportunity['base']
    quote = opportunity['quote']
    action = opportunity['action']
    
    try:
        if action == 'buy':
            order = await exchange.create_market_buy_order(f"{base}/{quote}", amount)
        else:
            order = await exchange.create_market_sell_order(f"{base}/{quote}", amount)
        
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –æ—Ä–¥–µ—Ä: {order}")
        trade_history.append({
            'timestamp': datetime.now(),
            'type': 'arbitrage',
            'base': base,
            'quote': quote,
            'action': action,
            'amount': amount,
            'order': order
        })
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏: {e}")
        return False

async def monitor_positions():
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
    """
    while True:
        try:
            positions = await exchange.fetch_positions()
            for position in positions:
                if position['amount'] > 0:
                    symbol = position['symbol']
                    entry_price = position['entryPrice']
                    amount = position['amount']
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
                    df = await get_historical_data(symbol, '1h')
                    volatility = calculate_volatility(df['close'])
                    stop_loss, take_profit = calculate_dynamic_stops(entry_price, volatility)
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    await apply_dynamic_stop_loss_take_profit(symbol, entry_price, amount, stop_loss, take_profit)
            
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–æ–∑–∏—Ü–∏–π: {e}")
            await asyncio.sleep(600)  # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

async def risk_management():
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∏—Å–∫–∞–º–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    """
    while True:
        try:
            total_balance = await get_total_balance_usdt()
            positions = await exchange.fetch_positions()
            
            total_risk = sum(position['amount'] * position['entryPrice'] for position in positions if position['amount'] > 0)
            risk_percentage = (total_risk / total_balance) * 100
            
            if risk_percentage > MAX_PORTFOLIO_RISK:
                logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {risk_percentage:.2f}%")
                # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∏—Å–∫–∏, –∑–∞–∫—Ä—ã–≤–∞—è —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π
                for position in positions:
                    if position['amount'] > 0:
                        symbol = position['symbol']
                        amount_to_close = position['amount'] * 0.1  # –ó–∞–∫—Ä—ã–≤–∞–µ–º 10% –ø–æ–∑–∏—Ü–∏–∏
                        try:
                            await exchange.create_market_sell_order(symbol, amount_to_close)
                            logger.info(f"–ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol} –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–∞")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —á–∞—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
            
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∏—Å–∫–∞–º–∏: {e}")
            await asyncio.sleep(1800)  # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dispatcher.message(Command("–°–¢–ê–†–¢"))
async def cmd_start_trading(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –°–¢–ê–†–¢
    """
    global is_trading
    is_trading = True
    await message.answer("–¢–æ—Ä–≥–æ–≤–ª—è –∏ –∞—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–ø—É—â–µ–Ω—ã.")

@dispatcher.message(Command("–°–¢–û–ü"))
async def cmd_stop_trading(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –°–¢–û–ü
    """
    global is_trading
    is_trading = False
    await message.answer("–¢–æ—Ä–≥–æ–≤–ª—è –∏ –∞—Ä–±–∏—Ç—Ä–∞–∂ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

@dispatcher.message(Command("–ë–ê–õ–ê–ù–° üí∞"))
async def cmd_balance(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ë–ê–õ–ê–ù–°
    """
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∞–ª–∞–Ω—Å–∞:", reply_markup=balance_keyboard)

@dispatcher.callback_query(lambda c: c.data == 'spot_balance')
async def callback_spot_balance(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —Å–ø–æ—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    """
    try:
        total_balance_usdt, crypto_balances = await get_spot_balance()
        
        response = f"–°–ø–æ—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {total_balance_usdt:.2f} USDT\n\n"
        response += "–ë–∞–ª–∞–Ω—Å—ã –ø–æ –≤–∞–ª—é—Ç–∞–º:\n"
        
        for currency, info in crypto_balances.items():
            response += f"{currency}: {info['amount']:.8f} "
            if currency != 'USDT':
                response += f"(–¶–µ–Ω–∞: {info['price_usdt']:.4f} USDT, "
            response += f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {info['value_usdt']:.2f} USDT)\n"

        await callback_query.message.answer(response)
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {str(e)}")

@dispatcher.callback_query(lambda c: c.data == 'p2p_balance')
async def callback_p2p_balance(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è P2P –±–∞–ª–∞–Ω—Å–∞
    """
    try:
        p2p_balance = await get_p2p_balance()
        
        response = f"P2P –±–∞–ª–∞–Ω—Å: {p2p_balance:.2f} USDT\n"
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ P2P –±–∞–ª–∞–Ω—Å–µ,
        # –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ API Binance

        await callback_query.message.answer(response)
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ P2P –±–∞–ª–∞–Ω—Å–∞: {str(e)}")

@dispatcher.message(Command("–ê–ù–ê–õ–ò–ó üìä"))
async def cmd_analysis(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ê–ù–ê–õ–ò–ó
    """
    analysis_results = []
    for symbol in SYMBOLS:
        result = latest_analysis_results.get((symbol, '5m'))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 5-–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
        if result:
            analysis_results.append(result)

    if not analysis_results:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    for result in analysis_results:
        try:
            response = f"üíπ {result['symbol']} (5m):\n"
            response += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {result['current_price']:.2f}\n"
            response += f"–ü—Ä–æ–≥–Ω–æ–∑ (–∞–Ω—Å–∞–º–±–ª—å): {result['prediction']:.2f} ({result['change']:.2f}%)\n"
            response += f"–ü—Ä–æ–≥–Ω–æ–∑ (ARIMA): {result['arima_forecast']:.2f}\n"
            response += f"–ü—Ä–æ–≥–Ω–æ–∑ (Prophet): {result['prophet_forecast']:.2f}\n"
            response += f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞: {result['sentiment_score']:.2f}\n"
            response += f"–û–±—ä–µ–º (MA): {result['volume_ma']:.2f}\n"
            response += f"–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {result['liquidity']:.2f}\n"
            response += f"–ê–Ω–æ–º–∞–ª–∏–∏: {result['anomalies']}\n"
            response += f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {result['volatility']:.4f}\n"
            response += f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å: {result['stop_loss']:.2f}\n"
            response += f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {result['take_profit']:.2f}\n"

            await message.answer(response)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            try:
                await message.answer_photo(InputFile(f'model_performance_{result["symbol"]}_5m.png'))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {result['symbol']}: {e}")
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {result['symbol']}.")

    await message.answer("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.")

@dispatcher.message(Command("–ì–†–ê–§–ò–ö üìà"))
async def cmd_chart(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ì–†–ê–§–ò–ö
    """
    for symbol in SYMBOLS:
        try:
            df = await get_historical_data(symbol, '1h')
            if df.empty:
                await message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                continue
            
            df = add_features(df)
            chart_input_file = await create_candlestick_chart(df, symbol, '1h')
            
            await message.answer_photo(photo=chart_input_file, caption=f"–ì—Ä–∞—Ñ–∏–∫ {symbol} (1h)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol}: {e}")
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {symbol}")
        
        await asyncio.sleep(1)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≥—Ä–∞—Ñ–∏–∫–æ–≤

@dispatcher.message(Command("–°–¢–ê–¢–ò–°–¢–ò–ö–ê üìâ"))
async def cmd_stats(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    """
    total_profit = sum(trade['order']['cost'] for trade in trade_history if trade['type'] in ['trade', 'arbitrage'])
    total_trades = len(trade_history)
    
    response = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n"
    response += f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n"
    response += f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.2f} USDT\n"
    
    if daily_balance_start is not None:
        current_balance = await get_total_balance_usdt()
        daily_change = current_balance - daily_balance_start
        daily_change_percent = (daily_change / daily_balance_start) * 100
        response += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {daily_change:.2f} USDT ({daily_change_percent:.2f}%)\n"
    
    await message.answer(response)

@dispatcher.message(Command("–ù–û–í–û–°–¢–ò üì∞"))
async def cmd_news(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ù–û–í–û–°–¢–ò
    """
    for symbol in SYMBOLS:
        news = await get_crypto_news(symbol)
        if news:
            response = f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ {symbol}:\n\n"
            for item in news:
                response += f"üìå {item['title']}\n"
                response += f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {item['link']}\n\n"
            await message.answer(response)
        else:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –æ {symbol}")

@dispatcher.message(Command("–ù–ê–°–¢–†–û–ô–ö–ò ‚öôÔ∏è"))
async def cmd_settings(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ù–ê–°–¢–†–û–ô–ö–ò
    """
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è:", reply_markup=settings_keyboard)

@dispatcher.callback_query(lambda c: c.data.startswith("set_percentage_"))
async def callback_set_percentage(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    """
    global PORTFOLIO_PERCENTAGE
    percentage = int(callback_query.data.split("_")[-1])
    PORTFOLIO_PERCENTAGE = percentage / 100
    await callback_query.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {percentage}%")
    await callback_query.message.answer(f"–ü—Ä–æ—Ü–µ–Ω—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {percentage}%")

@dispatcher.callback_query(lambda c: c.data == "set_custom_percentage")
async def callback_set_custom_percentage(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    """
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–æ—Ç 1 –¥–æ 100):")

@dispatcher.message(Command("–ü–ï–†–ï–í–û–î–´ üí∏"))
async def cmd_transfers(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ü–ï–†–ï–í–û–î–´
    """
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=transfer_keyboard)

@dispatcher.callback_query(lambda c: c.data == "transfer_crypto")
async def callback_transfer_crypto(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    """
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ü–ï–†–ï–í–û–î [FROM] [TO] [AMOUNT]\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–ï–†–ï–í–û–î BTC ETH 0.1")

@dispatcher.callback_query(lambda c: c.data == "transfer_p2p")
async def callback_transfer_p2p(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è P2P –ø–µ—Ä–µ–≤–æ–¥–∞
    """
    await callback_query.answer()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ P2P –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ü–ï–†–ï–í–û–î P2P [CURRENCY] [AMOUNT]\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–ï–†–ï–í–û–î P2P BTC 0.1")

@dispatcher.message(Command("–ü–ï–†–ï–í–û–î"))
async def cmd_transfer(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ü–ï–†–ï–í–û–î
    """
    try:
        parts = message.text.split()
        if len(parts) < 4:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ü–ï–†–ï–í–û–î [FROM] [TO] [AMOUNT] –∏–ª–∏ –ü–ï–†–ï–í–û–î P2P [CURRENCY] [AMOUNT]")
            return

        if parts[1].upper() == "P2P":
            if len(parts) != 4:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è P2P –ø–µ—Ä–µ–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ü–ï–†–ï–í–û–î P2P [CURRENCY] [AMOUNT]")
                return
            currency, amount = parts[2], float(parts[3])
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ P2P –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
            await message.answer(f"–ü–µ—Ä–µ–≤–æ–¥ {amount} {currency} –Ω–∞ P2P –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        else:
            from_currency, to_currency, amount = parts[1], parts[2], float(parts[3])
            if amount <= 0:
                await message.answer("–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
            success = await transfer_between_currencies(from_currency, to_currency, amount)
            if success:
                await message.answer(f"–ü–µ—Ä–µ–≤–æ–¥ {amount} {from_currency} –≤ {to_currency} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")

@dispatcher.message(Command("–ü–û–†–¢–§–ï–õ–¨ üíº"))
async def cmd_portfolio(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ü–û–†–¢–§–ï–õ–¨
    """
    try:
        total_balance_usdt, crypto_balances = await get_spot_balance()
        
        response = "–¢–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n\n"
        for currency, info in crypto_balances.items():
            percentage = (info['value_usdt'] / total_balance_usdt) * 100
            response += f"{currency}: {info['amount']:.8f} ({percentage:.2f}% –ø–æ—Ä—Ç—Ñ–µ–ª—è)\n"
        
        response += f"\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {total_balance_usdt:.2f} USDT"
        
        await message.answer(response)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {str(e)}")

@dispatcher.message(Command("–†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢ üõ°Ô∏è"))
async def cmd_risk_management(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢
    """
    try:
        total_balance = await get_total_balance_usdt()
        positions = await exchange.fetch_positions()
        
        total_risk = sum(position['amount'] * position['entryPrice'] for position in positions if position['amount'] > 0)
        risk_percentage = (total_risk / total_balance) * 100
        
        response = "–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:\n\n"
        response += f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.2f} USDT\n"
        response += f"–¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫: {risk_percentage:.2f}%\n"
        response += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∏—Å–∫: {MAX_PORTFOLIO_RISK}%\n\n"
        
        if risk_percentage > MAX_PORTFOLIO_RISK:
            response += "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ç–µ–∫—É—â–∏–π —Ä–∏—Å–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π!\n"
            response += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö."
        else:
            response += "‚úÖ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ."
        
        await message.answer(response)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ: {str(e)}")

@dispatcher.message(Command("–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø üîß"))
async def cmd_optimization(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø
    """
    await message.answer("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ –º–æ–¥–µ–ª–µ–π...")
    
    try:
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–µ–π
        await optimize_models()
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        await optimize_trading_strategies()
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
        await optimize_portfolio_allocation()
        
        await message.answer("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}")

async def optimize_models():
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    """
    for symbol in SYMBOLS:
        for timeframe in TIMEFRAMES:
            df = await get_historical_data(symbol, timeframe)
            X, y, _ = prepare_data_for_ml(df)
            if X is not None and y is not None:
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Random Forest
                rf_model = optimize_rf(X, y)
                
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è XGBoost
                xgb_model = xgb.XGBRegressor(objective="reg:squarederror", random_state=42, n_jobs=num_cores)
                xgb_model.fit(X, y)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –≤ latest_analysis_results
                latest_analysis_results[(symbol, timeframe)]['rf'] = {'model': rf_model}
                latest_analysis_results[(symbol, timeframe)]['xgb'] = {'model': xgb_model}
    
    logger.info("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def optimize_trading_strategies():
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    """
    global PORTFOLIO_PERCENTAGE, MAX_PORTFOLIO_RISK
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    best_performance = float('-inf')
    best_percentage = PORTFOLIO_PERCENTAGE
    
    for percentage in [0.05, 0.1, 0.15, 0.2, 0.25]:
        PORTFOLIO_PERCENTAGE = percentage
        performance = await backtest_trading_strategy()
        if performance > best_performance:
            best_performance = performance
            best_percentage = percentage
    
    PORTFOLIO_PERCENTAGE = best_percentage
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    best_performance = float('-inf')
    best_risk = MAX_PORTFOLIO_RISK
    
    for risk in [3, 5, 7, 10]:
        MAX_PORTFOLIO_RISK = risk
        performance = await backtest_trading_strategy()
        if performance > best_performance:
            best_performance = performance
            best_risk = risk
    
    MAX_PORTFOLIO_RISK = best_risk
    
    logger.info(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: PORTFOLIO_PERCENTAGE={PORTFOLIO_PERCENTAGE}, MAX_PORTFOLIO_RISK={MAX_PORTFOLIO_RISK}")

async def optimize_portfolio_allocation():
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    """
    returns = pd.DataFrame()
    for symbol in SYMBOLS:
        df = await get_historical_data(symbol, '1d')
        returns[symbol] = df['close'].pct_change()
    
    target_return = 0.1  # –¶–µ–ª–µ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
    weights = optimize_portfolio(returns, target_return)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    global portfolio_weights
    portfolio_weights = {symbol: weight for symbol, weight in zip(SYMBOLS, weights)}
    
    logger.info(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {portfolio_weights}")

async def backtest_trading_strategy():
    """
    –ü—Ä–æ–≤–æ–¥–∏—Ç –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    """
    initial_balance = 10000  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
    balance = initial_balance
    
    for symbol in SYMBOLS:
        df = await get_historical_data(symbol, '1h')
        X, y, scaler = prepare_data_for_ml(df)
        if X is not None and y is not None:
            model = latest_analysis_results[(symbol, '1h')]['ensemble']['model']
            balance += backtest_strategy(df, model, initial_balance=balance)
    
    return (balance - initial_balance) / initial_balance  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞
    """
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await bot.send_message(CHAT_ID, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=main_keyboard)
    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏...")
    tasks = [
        asyncio.create_task(continuous_analysis()),
        asyncio.create_task(trading_loop()),
        asyncio.create_task(update_daily_balance()),
        asyncio.create_task(monitor_positions()),
        asyncio.create_task(risk_management()),
        asyncio.create_task(periodic_model_update())
    ]
    
    try:
        logger.info("–ù–∞—á–∞–ª–æ –ø–æ–ª–ª–∏–Ω–≥–∞...")
        await dispatcher.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–ª–∏–Ω–≥–µ: {e}")
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        for task in tasks:
            task.cancel()
        await asyncio.gather(*tasks, return_exceptions=True)
        await exchange.close()
        await bot.session.close()
        # –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–µ—Å—Å–∏–∏
        for session in aiohttp.ClientSession._sessions:
            await session.close()

async def periodic_model_update():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–¥–µ–ª–∏, –æ–±—É—á–∞—è –∏—Ö –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ—à–∏–±–∫–∞—Ö
    """
    while True:
        await asyncio.sleep(3600)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ —Ä–∞–∑ –≤ —á–∞—Å
        logger.info("–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
        await learn_from_errors()
        logger.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

async def update_daily_balance():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å
    """
    global daily_balance_start, daily_pnl
    while True:
        now = datetime.now()
        if now.hour == 0 and now.minute == 0:
            daily_balance_start = await get_total_balance_usdt()
            daily_pnl = 0
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {daily_balance_start:.2f} USDT")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ AMD EPYC 7402
    tf.config.threading.set_inter_op_parallelism_threads(num_cores)
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è TensorFlow
    gpus = tf.config.experimental.list_physical_devices('GPU')
    if gpus:
        try:
            for gpu in gpus:
                tf.config.experimental.set_memory_growth(gpu, True)
        except RuntimeError as e:
            print(e)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ asyncio –¥–ª—è Windows
    if os.name == 'nt':
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    
    # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    logging.getLogger('asyncio').setLevel(logging.ERROR)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    def handle_exception(loop, context):
        msg = context.get("exception", context["message"])
        logging.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {msg}")
        logging.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        asyncio.create_task(main())

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    loop = asyncio.get_event_loop()
    loop.set_exception_handler(handle_exception)
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞
    asyncio.run(main())

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Drive

async def upload_log_to_drive():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–≥-—Ñ–∞–π–ª—ã –Ω–∞ Google Drive
    """
    try:
        await upload_to_drive('bot_log.txt', 'bot_log.txt')
        await upload_to_drive('crypto_ml_log.txt', 'crypto_ml_log.txt')
        logger.info("–õ–æ–≥-—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ Google Drive")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –Ω–∞ Google Drive: {e}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞

async def analyze_market_sentiment():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞
    """
    sentiment_scores = []
    for symbol in SYMBOLS:
        sentiment = await analyze_news_sentiment(symbol)
        sentiment_scores.append(sentiment)
    
    average_sentiment = np.mean(sentiment_scores)
    logger.info(f"–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞: {average_sentiment:.2f}")
    return average_sentiment

async def detect_market_trends():
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–Ω–¥—ã –Ω–∞ —Ä—ã–Ω–∫–µ
    """
    trends = {}
    for symbol in SYMBOLS:
        df = await get_historical_data(symbol, '1d')
        if len(df) > 20:
            sma20 = ta.trend.sma_indicator(df['close'], window=20)
            sma50 = ta.trend.sma_indicator(df['close'], window=50)
            current_price = df['close'].iloc[-1]
            
            if current_price > sma20.iloc[-1] > sma50.iloc[-1]:
                trends[symbol] = "–í–æ—Å—Ö–æ–¥—è—â–∏–π"
            elif current_price < sma20.iloc[-1] < sma50.iloc[-1]:
                trends[symbol] = "–ù–∏—Å—Ö–æ–¥—è—â–∏–π"
            else:
                trends[symbol] = "–ë–æ–∫–æ–≤–æ–π"
    
    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –Ω–∞ —Ä—ã–Ω–∫–µ: {trends}")
    return trends

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏

def calculate_sharpe_ratio(returns, risk_free_rate=0.02):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞
    """
    excess_returns = returns - risk_free_rate / 252  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    return np.sqrt(252) * excess_returns.mean() / excess_returns.std()

async def optimize_position_sizing():
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞ –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    """
    portfolio_values = []
    for symbol in SYMBOLS:
        df = await get_historical_data(symbol, '1d')
        returns = df['close'].pct_change().dropna()
        sharpe = calculate_sharpe_ratio(returns)
        volatility = returns.std()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        position_size = (sharpe / volatility) / len(SYMBOLS)
        portfolio_values.append((symbol, position_size))
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π
    total_size = sum(pv[1] for pv in portfolio_values)
    normalized_positions = {pv[0]: pv[1] / total_size for pv in portfolio_values}
    
    logger.info(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π: {normalized_positions}")
    return normalized_positions

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

async def perform_technical_analysis(symbol, timeframe):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    """
    df = await get_historical_data(symbol, timeframe)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['EMA50'] = ta.trend.ema_indicator(df['close'], window=50)
    df['EMA200'] = ta.trend.ema_indicator(df['close'], window=200)
    df['MACD_diff'] = ta.trend.macd_diff(df['close'])
    df['ADX'] = ta.trend.adx(df['high'], df['low'], df['close'])
    
    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
    last_close = df['close'].iloc[-1]
    trend = "–í–æ—Å—Ö–æ–¥—è—â–∏–π" if last_close > df['EMA50'].iloc[-1] > df['EMA200'].iloc[-1] else "–ù–∏—Å—Ö–æ–¥—è—â–∏–π"
    
    # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
    adx = df['ADX'].iloc[-1]
    trend_strength = "–°–∏–ª—å–Ω—ã–π" if adx > 25 else "–°–ª–∞–±—ã–π"
    
    # –°–∏–≥–Ω–∞–ª—ã
    macd_signal = "–ü–æ–∫—É–ø–∫–∞" if df['MACD_diff'].iloc[-1] > 0 else "–ü—Ä–æ–¥–∞–∂–∞"
    
    analysis = {
        "symbol": symbol,
        "timeframe": timeframe,
        "trend": trend,
        "trend_strength": trend_strength,
        "macd_signal": macd_signal,
        "last_close": last_close,
        "adx": adx
    }
    
    logger.info(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è {symbol} –Ω–∞ {timeframe}: {analysis}")
    return analysis

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
async def save_bot_state():
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    """
    while True:
        try:
            state = {
                "latest_analysis_results": latest_analysis_results,
                "model_performance": model_performance,
                "user_portfolios": user_portfolios,
                "is_trading": is_trading,
                "daily_balance_start": daily_balance_start,
                "daily_pnl": daily_pnl,
                "trade_history": trade_history
            }
            with open("bot_state.pkl", "wb") as f:
                pickle.dump(state, f)
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            await upload_to_drive("bot_state.pkl", "bot_state.pkl")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞: {e}")
        await asyncio.sleep(3600)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def load_bot_state():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    """
    try:
        with open("bot_state.pkl", "rb") as f:
            state = pickle.load(f)
        global latest_analysis_results, model_performance, user_portfolios, is_trading, daily_balance_start, daily_pnl, trade_history
        latest_analysis_results = state["latest_analysis_results"]
        model_performance = state["model_performance"]
        user_portfolios = state["user_portfolios"]
        is_trading = state["is_trading"]
        daily_balance_start = state["daily_balance_start"]
        daily_pnl = state["daily_pnl"]
        trade_history = state["trade_history"]
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    except FileNotFoundError:
        logger.info("–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞: {e}")

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é main –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞
    """
    load_bot_state()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await bot.send_message(CHAT_ID, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=main_keyboard)
    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ç–æ—Ä–≥–æ–≤–ª–∏...")
    tasks = [
        asyncio.create_task(continuous_analysis()),
        asyncio.create_task(trading_loop()),
        asyncio.create_task(update_daily_balance()),
        asyncio.create_task(monitor_positions()),
        asyncio.create_task(risk_management()),
        asyncio.create_task(periodic_model_update()),
        asyncio.create_task(save_bot_state()),  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        asyncio.create_task(upload_log_to_drive())  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤
    ]
    
    try:
        logger.info("–ù–∞—á–∞–ª–æ –ø–æ–ª–ª–∏–Ω–≥–∞...")
        await dispatcher.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–ª–∏–Ω–≥–µ: {e}")
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        for task in tasks:
            task.cancel()
        await asyncio.gather(*tasks, return_exceptions=True)
        await exchange.close()
        await bot.session.close()
        # –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–µ—Å—Å–∏–∏
        for session in aiohttp.ClientSession._sessions:
            await session.close()

if __name__ == "__main__":
    asyncio.run(main())